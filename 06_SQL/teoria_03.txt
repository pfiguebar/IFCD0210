INSERTAR DATOS
INSERT INTO producto (id, titulo, precio) VALUES (1, "tabla de planchar", 12.99);

***************************************************************************************************************

ACTUALIZAR DATOS
metodo generico  --> actualizar campos indicando su id
UPDATE producto SET titulo='maquina lavar', precio=120 WHERE id=77;

EJEMPLOS  
    0) Actualizar todos los campos de una tabla, aplicando formula 
    UPDATE producto SET precio=precio*1.10;
  
    1) Actualizar todos los productos cuyo precio sea superior a 100 euros
    UPDATE producto SET precio=precio*0.8 WHERE precio>100;
    
    2) Actualizar todos los productos categoria tornillos y tuercas
    Ejemplo tabla A  id, nombre, precio, categoria               
                     1, "wurt", "1", "tornillos"                                 
                     2, "bosc", "2", "tuercas"                                   
                     3, "fail", "3", "arandelas"                                 
    UPDATE productos SET precio=precio*0.8 WHERE (categoria="tornillos" OR categoria="tuercas");
    Aqui solo le modifica precios a registro 1 y 2. No se lo aplica a 3
    
    3) Poner activo = 0 a todos los alumnos cuyas faltas sean superior a 10
    Ejemplo tabla ALUMNOS (id, dni, numero_alumno, numero_faltas, activo(campo boleano))
        UPDATE alumnos SET activo=0 WHERE numero_faltas>10;

***************************************************************************************************************

BORRAR DATOS
DELELTE FROM producto WHERE id=77;

EJEMPLOS
0) Borrar todos los tornillos de la tabla productos
DELETE FROM productos WHERE categoria="tornillos";

***************************************************************************************************************

SELECCCIONAR DATOS
Lo primero es la palabra SELECT, a continuacion se listan las filas que se quiere que el SGBD devuelva. Despues hay que especificar donde se encuentran esos datos via FROM o JOINS. A continuacion en el WHERE se especifican las condiciones. Despues se utiliza la agrupacion GROUP BY que puede llevar condiciones extras con HAVING. Finalmente ORDER BY que ordena resultado segun se desea

Ejemplo tabla ALUMNOS (id, nombre, apellidos, direccion, telefono)
Seleccionar todos los campos nombre y apellidos de la tabla alumnos, que cumpla condicion nombre es igual a manolo
SELECT nombre, apellidos FROM alumnos WHERE nombre="manolo" 

0)tenemos la siguiente tabla EMPRESAS (id, nombre, direccion, estado (es celda enum "contactado", "no contactado")
Queremos conocer los valores de ENUM
SELECT DISTINCT estado FROM empresas  // Con DISTINCT ..nos devuelve 2 valores "contactado" y "no contactado"
                                      // Sin DISTINCT ..nos da todos valores de la columna estado.. desde id=1 hasta id=infinito
                                      
1) Uso de alias
Ejemplo: programador no puso bien nombre columna (lo llamo categoria_producto). Realmente era categoria tienda. Para ello se puede usar un alias (AS)
Alias solo vive en la consulta. No genera una nueva variable en ningun sitio
SELECT categoria_producto AS categoria_tienda WHERE categoria = "tornillo";

2) Hacer un paginador
Ejemplo: de todos los datos de una tabla productos, quiero mostrar solo primeros 5 resultados de una lista de 100 
SELECT * FORM productos LIMIT 5;

Ejemplo: de todos los datos de una tabla producto, quiero mostrar los resultados (no son los id)  desde la posicion 5 a la 10
SELECT * FROM productos LIMIT 5, 10;

3) nombre de productos de la tabla productos, cuyo precio este entre 1000 y 1500 euros 
  3.1) FORMA 1 ESCRIBIR --> SELECT nombre_producto FROM productos WHERE precio_producto >= 1000 AND precio_producto =< 1500;
  3.2) FORMA 2 ESCRIBIR --> SELECT nombre_producto FROM productos WHERE precio_producto BETWEEN 1000 AND 1500;   (ambos incluidos)
  
 4) nombre alumnos de la tabla alumnos, cuya edad esta entre 30 y 40 aÃ±os
 SELECT nombre_alumnos FROM alumnos WHERE edad BETWEEN 30 AND 40;
 
 5) nombre alumnos de la tabla alumnos, cuya edad no esta entre 30 y 40
 SELECT nombre_alumnos FROM alumnos WHERE edad NOT BETWEEN 30 AND 40;
 
 6) nombre de alumnos de la tabla alumnos, cuya localidad sea Antequera o Torremolinos
    6.1) FORMA 1 ESCRIBIR --> SELECT nombre_alumnos FROM alumnos WHERE (localidad = "Antequera" OR localidad = "Torremolinos");
    6.2) FORMA 2 ESCRIBIR --> SELECT nombre_alumnos FROM alumnos WHERE localidad IN("Antequera", "Torremolinos");

 7) nombre de alumnos de la tabla alumnos, cuya localidad NO sea Antequera o Torremolinos
     7.1) FORMA 1 ESCRIBIR --> SELECT nombre_alumnos FROM alumnos WHERE (localidad != "Antequera" AND localidad != "Torremolinos");
     7.2) FORMA 2 ESCRIBIR --> SELECT nombre_alumnos FROM alumnos WHERE localidad NOT IN("Antequera", "Torremolinos");
     
 8) buscar valores de campos igual a nulos (NULL): Ejemplo aquellos campos cuyo dni no esta rellenado aun
 SELECT * FROM alumnos WHERE dni IS NULL;
 
 9) buscar valores de campos igual a no nulos (NOT NULL): Ejemplo aquellos campos cuyo dni esta rellenado 
 SELECT * FROM alumnos WHERE dni IS NOT NULL;
 
 10) Seleccionar nombres alumnos de la tabla alumnos, cuya letra empiezan por A
 SELECT nombre FROM alumnos WHERE nombre LIKE "A%";     (% es lo demas no me importa --> similar a *.* )
 
 11) Seleccion nombre alumnos de la tabla alumnos, cuya ultima letra sea S
 SELECT nombre FROM alumnos WHERE nombre LIKE "%S"; 
 
 12) Seleccionar nombres alumnos de la tabla alumnos, que contengan X en alguna parte
 SELECT nombre FROM alumnos WHERE nombre LIKE "%X%"; 
 
 13) Seleccionar nombre alumnos de la tabla alumnos, que contengan A en la 3a posicion
 SELECT nombre FROM alumnos WHERE nombre LIKE "__A%";    (_ es un caracter se usa para contar)
 
 14) Mirar si valores campo email estan correctos (sabemos que tiene una arroba y un punto)
 SELECT email FROM alumnos WHERE email LIKE "%@%.%";
 
 15) Por defecto SQL ordena por ID y orden ascendente.
    Tenemos una tabla empresas (id, nomnbre, edad, direccion, telefono)
    15.1) Ordenar por orden descendente
    SELECT nombre,edad FROM empresas ORDER BY nombre DESC;
    
    15.2) Ordenar nombre descendente y edad ascendente
    SELECT nombre,edad FROM empresas ORDER BY nombre DESC, edad ASC;   (ordena nombre descendente y en caso empate ... edad ascendente)
    
 16) Transformar datos 
    Nuestra tabla alumnos (id, nombre, apellidos, direccion, telefono);
    SELECT CONCAT("nombre","","apellidos") FROM alumnos;    // aqui alias = CONCAT("nombre","","apellidos")
    
    En caso querer un alias (nombre_apellidos)
    SELECT CONCAT("nombre","","apellidos") AS nombre_apellidos FROM alumnos;
    
17) Mayusculas y minusculas
Seleccionar nombres de la tabla alumnos y mostrar aquellos tengan primera letra A
SELECT UPPER(nombres) FROM alumnos;
SELECT LOWER(nombres) FROM alumnos;



18) Funcion Substring (permite seleccionar un numero de caracteres)
Mostrar los primeros 50 caracteres del campo descripcion que pertenece a la tabla noticias
SELECT SUBSTRING(descripcion, 0, 50) FROM noticias;


19) Funcion TRIM (quita los espacios finales e iniciales de una cadena)

 
 


 
